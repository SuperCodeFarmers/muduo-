// Use of this source code is governed by a BSD-style license
// that can be found in the License file.
//
// Author: Shuo Chen (chenshuo at chenshuo dot com)

#include "muduo/base/AsyncLogging.h"
#include "muduo/base/LogFile.h"
#include "muduo/base/Timestamp.h"

#include <stdio.h>

using namespace muduo;

AsyncLogging::AsyncLogging(const string& basename,
	off_t rollSize,
	int flushInterval)
	: flushInterval_(flushInterval),
	running_(false),
	basename_(basename),
	rollSize_(rollSize),
	thread_(std::bind(&AsyncLogging::threadFunc, this), "Logging"),
	latch_(1),
	mutex_(),
	cond_(mutex_),
	currentBuffer_(new Buffer),
	nextBuffer_(new Buffer),
	buffers_()
{
	currentBuffer_->bzero();
	nextBuffer_->bzero();
	buffers_.reserve(16);
}

// 供前端生产者线程调用(日志数据写到缓冲区)
void AsyncLogging::append(const char* logline, int len)
{
	// 因为会有多个线程往缓冲区中写数据，所以要使用互斥量进行保护
	muduo::MutexLockGuard lock(mutex_);
	if (currentBuffer_->avail() > len)
	{
		// 当前缓冲区未满，将数据追加到末尾
		currentBuffer_->append(logline, len);
	}
	else
	{
		// 当前缓冲区已满，将当前缓冲区添加到待写如文件的已填满的缓冲区列表
		buffers_.push_back(std::move(currentBuffer_));

		// 将当前缓冲区设置为预备缓冲区
		if (nextBuffer_)
		{
			currentBuffer_ = std::move(nextBuffer_);// 使用移动语义
		}
		else
		{
			// 这种情况极少发生，前端写入太快，一下子把两块缓冲区都写完了
			// 那么只好分配一块新的缓冲区
			currentBuffer_.reset(new Buffer); // Rarely happens
		}
		currentBuffer_->append(logline, len);
		cond_.notify();	// 通知后端开始写入日志，缓冲区写满了才通知后端开始写日志，这样子后端不用频繁的进行IO调用
	}
}

// 后端调用
void AsyncLogging::threadFunc()
{
	assert(running_ == true);
	latch_.countDown();
	LogFile output(basename_, rollSize_, false);

	// 准备两块缓冲区
	BufferPtr newBuffer1(new Buffer);
	BufferPtr newBuffer2(new Buffer);
	newBuffer1->bzero();
	newBuffer2->bzero();
	BufferVector buffersToWrite;
	buffersToWrite.reserve(16); // 预留16字节空间
	while (running_)
	{
		assert(newBuffer1 && newBuffer1->length() == 0);
		assert(newBuffer2 && newBuffer2->length() == 0);
		assert(buffersToWrite.empty());

		{
			muduo::MutexLockGuard lock(mutex_);
			/*
			对于条件变量一般使用while，而不是if
			因为if无法解决虚假唤醒。waitForSeconds可能会被信号打断了，并没有满足buffers_为空，只是被信号所打断
			也就是他条件并不满足，所以仍然要判断它的条件是否满足，即使用while循环进行处理
			*/
			
			if (buffers_.empty())  // unusual usage!（注意，这里是一个非常规用法）
			{
				// buffers_为空的时候才进行等待
				cond_.waitForSeconds(flushInterval_);	// 等待前端写满一个或者多个buffer，或者一个超时时间到来
			}
			buffers_.push_back(std::move(currentBuffer_));	// 将当前缓冲区一如buffers_
			currentBuffer_ = std::move(newBuffer1); // 将空闲的newBuffer1置为当前缓冲区
			buffersToWrite.swap(buffers_);	//他们只是交换了指针，不存在数据的拷贝，所以比较快
											// buffers_与buffersToWrite交换，这样后面的代码可以在临界区之外安全的访问buffersToWrite
			if (!nextBuffer_)
			{
				nextBuffer_ = std::move(newBuffer2);	// 确保前端始终有一个预备buffer可供调配
														// 这样可以减少前端临界区分配内存的概率，缩短前端临界区长度
			}
		}

		assert(!buffersToWrite.empty());


		// 消息堆积
		// 前端陷入死循环，拼命发送日志消息，超过后端的处理能力，这就是典型的生产速度
		// 超过消费速度问题，会造成数据在内存中堆积，严重时引发性能问题(可用内存不足)
		// 或者程序崩溃(分配内存失败)

		// 缓冲区块的个数最多为25个，如果超出了，就只保留两个缓冲区块把多余的删除，以保证系统有足够的内存
		if (buffersToWrite.size() > 25)
		{
			char buf[256];
			snprintf(buf, sizeof buf, "Dropped log messages at %s, %zd larger buffers\n",
				Timestamp::now().toFormattedString().c_str(),
				buffersToWrite.size() - 2);
			fputs(buf, stderr);
			output.append(buf, static_cast<int>(strlen(buf)));
			buffersToWrite.erase(buffersToWrite.begin() + 2, buffersToWrite.end()); // 丢掉多余日志，以腾出内存，仅保留两块缓冲区
		}

		for (const auto& buffer : buffersToWrite)
		{
			// FIXME: use unbuffered stdio FILE ? or use ::writev ?
			// 写到文件当中
			output.append(buffer->data(), buffer->length());
		}

		// 写完以后，我们就拿出两块缓冲区块
		if (buffersToWrite.size() > 2)
		{
			// drop non-bzero-ed buffers, avoid trashing
			buffersToWrite.resize(2); // 仅保存两个buffer,用于newBuffer1和newBuffer2
		}

		if (!newBuffer1)
		{
			assert(!buffersToWrite.empty());
			newBuffer1 = std::move(buffersToWrite.back());
			buffersToWrite.pop_back();
			newBuffer1->reset();
		}

		if (!newBuffer2)
		{
			assert(!buffersToWrite.empty());
			newBuffer2 = std::move(buffersToWrite.back());
			buffersToWrite.pop_back();
			newBuffer2->reset();
		}

		// 多余的缓冲区块都给释放掉
		buffersToWrite.clear();
		output.flush();
	}
	output.flush();
}

